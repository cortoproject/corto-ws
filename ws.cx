#package corto/ws
#import corto/web/server

// Setup new connection (client -> server)
struct connect::
  session: string
  version: string

// Connection established (server -> client)
struct connected::
  session: string

// Connection failed (server -> client)
struct failed::
  version: string

// Subscribe for data (client -> server)
struct sub::
  id: string
  parent: string
  expr: string
  type: string
  offset: uint64
  limit: uint64

// Unsubscribe for data (client -> server)
struct unsub::
  id: string

// Data message (server -> client)
struct dataMember::
  name: string
  type: lang/type

struct dataObject::
  id: string
  p: string, optional
  o: object, optional
  v: verbatim{"text/json"}, optional

struct dataType::
  type: type
  kind: string, optional
  members: list{dataMember}, optional
  constants: list{string}, optional
  elementType: type, optional
  set: list{dataObject}, optional
  del: list{dataObject}, optional

struct data::
  sub: string
  data: list{dataType}


// WS Server
container Server: SockJs, implements={dispatcher}::
  
  void post(event e) // Post event to event queue
  void onPoll() override // Read events from event queue
  void onData(HTTP/Connection c, string msg) override // Receive data
  void onClose(HTTP/Connection c) override // Connection closed

  events: list{event}, private|local // Event queue

  // Server sessions
  table Session::
    id: string, key // Session id

    // Private members
    conn: HTTP/Connection, private|local // HTTP connection
    typesAligned: list{type}, private|local // Track types aligned for session
  
    void send(object msg)

    // Subscriptions for session
    table Subscription: subscriber::
      id: string, key // Subscription id
      batch: list{event}, private|local // Events to be handled in next batch
      void addEvent(event e)
      void processEvents()


